/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package problemSolving;


import com.google.common.collect.Table;
import org.checkerframework.checker.units.qual.C;


import javax.swing.*;
import java.util.*;
import java.util.logging.Logger;
import org.apache.commons.lang3.StringUtils;


public class App {

    private static final Logger logger= Logger.getLogger(App.class.getName());


    public static void main(String[] args) throws CustomException {

//        int num=10;
//        double x=Math.sqrt(num);
//        System.out.println(x);
//        BitSet d=new BitSet();
//        String s="java";
//        String y="yaaaaaazan";
//        System.out.println(removeDuplicate(s));
//        System.out.println(mostRepeated(s));
//        System.out.println(mostRepeated(y));
//        printDuplicate(y).forEach(System.out::println);
//        logger.info(removeDuplicate(y));
//        logger.info(removeDup(y));
//        Hashtable<String,String> hashtable=new Hashtable<>();
//starPateren();
//        starPateren1();
//        starPateren2();

//        int []intArray ={1,2,3,4,5};
//        printPattern();
//        System.out.println(findIndex(intArray,3));
//     String str="hello it is sociumtech to my world , world is good and i dont need your company any morelloo to is is world ";
//        System.out.println(lastWordLength(str));
//        System.out.println(lastWordLength1(str));
//        System.out.println(firstRepetaedWord(str));
//        System.out.println(mostRepetaedWord(str));
//        System.out.println(HowManyRepeated(str,"world"));
//        String name="yazyazyazn";
//        System.out.println(HowManyRepeated(name,"yaz"));
//
//        String digits="ab5c2d4ef1562s";
//        System.out.println(findSumOfDigitsInString(digits));
//
//        String testString="yazan";
//        System.out.println(reverseWord(testString));
//
//        String stri="zebrazone";
//        System.out.println(removeChar(stri,'z'));
//
//        String str1="textkk";
//        String str2="hfgd";
//        System.out.println(mergeStrings(str1,str2));

//        String name= JOptionPane.showInputDialog("Enter your name ?");
//        JOptionPane.showMessageDialog(null,"hello "+name);
//
//
//        int age= Integer.parseInt(JOptionPane.showInputDialog("Enter your age ?"));
//        JOptionPane.showMessageDialog(null,"You are "+age+" years old");
//
//        double height= Double.parseDouble(JOptionPane.showInputDialog("Enter your height ?"));
//        JOptionPane.showMessageDialog(null,"you are "+height+" m tall");
//        int[] arr={2,8,3,5,6,1,5,10};
//        int[] ans=bibleSort(arr);
//        System.out.println(Arrays.toString(ans));
//        System.out.println(findFactorial(6));
////        System.out.println(Arrays.toString(findAns()));
//        int[] arr={1,2,3,4,5,6,7};
//        System.out.println(Arrays.toString(reverse(arr)));
//        int[] arr={1000,200,5,8,50,12,3};
//                System.out.println(Arrays.toString(secMaxValue(arr)));

//        String[] arr={};
//        System.out.println(getLikes("yazan","ahmad","omar"));

//        List<String> list1=new ArrayList<>();
//        list1.add("one");
//        list1.add("two");
//        list1.add("three");
//        List<String> list2=new ArrayList<>();
//        list2.add("two");
//
//list1.removeAll(list2);
//        System.out.print(list1);
//
//        String a="yazanabdulhafez";
//        System.out.println(Arrays.toString(solve(a)));

        Yazan y=new Yazan("yazan",50);
        Ahmad a=new Ahmad("ahmad",25);

        System.out.println(y);
        System.out.println(a);

    }


    @Override
    public String toString() {
        return "App{}";
    }

    public static int findIndex(int[] arr, int ele){
        for (int i = 0; i <arr.length ; i++) {
           if(arr[i]==ele){
               return i;
           }
        }
        return -1;
    }
    public  static void  printPattern(){
        for (int i = 1; i <= 10; i++) {

                System.out.println("- - - - - - - - - -");

        }
    }
    public static String removeDuplicate(String str){
        String result= "";
List<Character> charList=new ArrayList<>();
        for (int i = 0; i <str.length() ; i++) {
          if(!charList.contains(str.charAt(i))){
            charList.add(str.charAt(i));
            result+=str.charAt(i);
          }
        }
        return result;
    }

    public  static String removeDup(String str){
        StringBuilder result= new StringBuilder();
        Set<Character> charSet=new HashSet<>();
        for (int i = 0; i < str.length(); i++) {
            charSet.add(str.charAt(i));
        }
      for(char e:charSet){
          result.append(e);
      }
      return result.toString();
    }

    public static char mostRepeated(String str){
        Map<Character,Integer> charMap=new HashMap<>();
        for (int i = 0; i < str.length(); i++) {
          if(!charMap.containsKey(str.charAt(i))){
           charMap.put(str.charAt(i),1);
          }else{
              charMap.put(str.charAt(i), charMap.get(str.charAt(i))+1);
          }
        }
        var wrapper = new Object(){ int max=Integer.MIN_VALUE;};
        var wrapper1 = new Object(){ char ans=' ';};

        charMap.forEach((key,value)->{
            if(value> wrapper.max){
                wrapper.max=value;
                wrapper1.ans=key;
            }
        });
//        for(Map.Entry<Character,Integer> el:charMap.entrySet()){
//if(el.getValue()>max){
//    max=el.getValue();
//    ans=el.getKey();
//}
//        }

        return wrapper1.ans;
    }

    public static List<Character> printDuplicate(String str){
        List<Character> ans=new ArrayList<>();
        List<Character> charList=new ArrayList<>();
        for (int i = 0; i <str.length() ; i++) {
            if(charList.contains(str.charAt(i))){
                if(!ans.contains(str.charAt(i))) {
                    ans.add(str.charAt(i));
                }
            }else{
                charList.add(str.charAt(i));
            }
        }
        return ans;
    }

    public static void starPateren(){
        for (int i = 1; i <= 5; i++) {
            for (int j = 0; j < i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
    public static void starPateren1(){

        for (int i = 1; i <= 5; i++) {
            for (int j = 6-i; j >0 ; j--) {
                System.out.print(" ");
            }
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    public static void starPateren2(){
        System.out.println();
        starPateren();
        for (int i = 1; i <= 5; i++) {
            for (int j = 0; j <=i ; j++) {
                System.out.print(" ");
            }
            for (int j =5-i; j >0; j--) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    public static int lastWordLength(String str){
        int count=0;
        for (int i = str.length()-1; i > 0; i--) {
          if(str.charAt(i)!=' '&&Character.isLetter(str.charAt(i))){
              count++;
          }else{
              if(i!=str.length()-1&&str.charAt(i)==' '){
                  break;
              }
          }
        }
        return count;
    }

    public static int lastWordLength1(String str){
        String[] words =str.split(" ");
        return words[words.length-1].length();

    }


    public static String firstRepetaedWord(String str){
        Map<String,Integer> words =new HashMap<>();
        String[] wordsArr=str.split(" ");
        for(String el:wordsArr){
            if(words.containsKey(el)){
                return el;
            }else{
                words.put(el,1);
            }
        }
        return null;
    }

    public static String mostRepetaedWord(String str){
        Map<String,Integer> words =new HashMap<>();
        String[] wordsArr=str.split(" ");
        for(String el:wordsArr){
            if(words.containsKey(el)){
                words.put(el, words.get(el)+1);
            }else{
                words.put(el,1);
            }
        }
        int max=Integer.MIN_VALUE;
        for(Map.Entry<String,Integer> e:words.entrySet()){
            if(e.getValue()>max){
                max=e.getValue();
            }
        }

        for(Map.Entry<String,Integer> el:words.entrySet()){
            if(el.getValue()==max){
                return el.getKey();
            }
        }
        return null;
    }

    public static int HowManyRepeated(String str,String target){
        int count=0;
       int n=target.length();
       List<String> syllables=new ArrayList<>();
        for (int i = 0; i <str.length()&&i+n<str.length() ; i++) {
            syllables.add(str.substring(i,i+n));
        }
        syllables.forEach(System.out::println);
        for(String el:syllables){
            if(Objects.equals(el, target)){
                count++;
            }
        }
        return count;
    }

     public static int findSumOfDigitsInString(String str){
        int sum=0;
         for (int i = 0; i <str.length() ; i++) {
          if(Character.isDigit(str.charAt(i))){
              sum+=Integer.parseInt(String.valueOf(str.charAt(i)));
          }
         }
         return sum;
     }

     public static String reverseWord(String str){
        StringBuilder newString=new StringBuilder();
         for (int i = 0; i < str.length(); i++) {
           newString.append(str.charAt(str.length()-i-1));
         }
         return newString.toString();
     }

     public static String removeChar(String str,char c){
        StringBuilder newStr= new StringBuilder();
         for (int i = 0; i <str.length() ; i++) {
            if(str.charAt(i)==c&&i!=0&&i!=str.length()-1){
            }else{
                newStr.append(str.charAt(i));
            }
         }
         return newStr.toString();
     }

     public static String mergeStrings(String str1,String str2){
        StringBuilder result=new StringBuilder();
        int maxLength = Math.max(str1.length(), str2.length());
         for (int i = 0; i <maxLength ; i++) {
             if(i<str1.length()) {
                 if (str1.charAt(i) != ' ') {
                     result.append(str1.charAt(i));
                 }
             }
             if(i<str2.length()) {
                 if (str2.charAt(i) != ' ') {
                     result.append(str2.charAt(i));
                 }
             }

         }
        return result.toString();
     }

     public static int[] bibleSort(int[] arr){
        int n=arr.length;
         for (int i = 0; i <n-1 ; i++) {
             for (int j = 0; j <n-i-1 ; j++) {
               if(arr[j]<arr[j+1]){
                   int temp=arr[j];
                   arr[j]=arr[j+1];
                   arr[j+1]=temp;

               }
             }

         }
         return arr;
     }

     public static int findFactorial(int n){

        if(n==1)return 1;
        return n*findFactorial(n-1);

     }

     public static int[] findAns(){
        int[] ans=new int[2];
         for (int i = 1; i <10 ; i++) {
             for (int j = 1; j <100 ; j++) {
               if(9.5*i+2.5*j==50){
                   ans[0]=i;
                   ans[1]=j;
                   return ans;
               }
             }

         }
         return ans;
     }

     public static int[] reverse(int[] arr){
        int low=0;
        int high=arr.length-1;
        int temp=0;
        while (low<high){
            temp=arr[low];
            arr[low]=arr[high];
            arr[high]=temp;
            low++;
            high--;
        }
        return arr;
     }

     public static int[] secMaxValue(int[] arr){
        int[] ans=new int[2];
        int max=Integer.MIN_VALUE;
        int secMax=Integer.MIN_VALUE;
        int index=0;
         for (int i = 0; i < arr.length ; i++) {
           if(arr[i]>max){
               max=arr[i];
               index=i;
           }
         }

         for (int i = 0; i < arr.length; i++) {
             if(arr[i]>secMax && i!=index){
                 System.out.println(arr[i]);
                 secMax=arr[i];
             }
         }
         ans[0]=max;
         ans[1]=secMax;
         return ans;
     }

     public static String getLikes(String... names){
        if(names.length==0)return "no one likes this";
        if(names.length==1)return names[0]+" likes this";
        if(names.length==2)return names[0]+" and "+names[1]+" like this";
         if(names.length==3)return names[0]+", "+names[1]+" and "+names[2]+" like this";
         return names[0]+", "+names[1]+" and "+(names.length-2)+" others like this";
     }

    public static int[] solve(String A) {

        int[] ans =new int[26];
        for(int i=0;i<A.length();i++){
            char ch=A.charAt(i);
            System.out.println(Character.getNumericValue(ch));
            int charIndex=ch-'a';
            System.out.println(ch);
            System.out.println(charIndex);
            ans[charIndex]++;
        }
        return ans;
    }

    public static int findOcurrence(String text){
        return StringUtils.countMatches(text,'a');
    }

    class CustomException extends Exception{
        public CustomException(String message){
            super(message);
        }

    }
}

class Ahmad{
    private final String name;
    private final int age;

    public Ahmad(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return "Ahmad{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}

